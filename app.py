from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import pandas as pd
import io
import os
import sys
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

# ============================================================================
# UMAY APP - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RENDER –ò RAILWAY
# –í–µ—Ä—Å–∏—è: 5.1 - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Render –∏ Railway
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info("=== UMAY APP STARTING - SIMPLE VERSION v5.0 ===")

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    os.makedirs('data', exist_ok=True)
    logger.info("Data directory created/verified")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ data: {e}")
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ data: {e}")

# –ü–†–û–°–¢–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• - SQLITE –ò POSTGRESQL
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL URL –æ—Ç Render –∏–ª–∏ Railway
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL and (DATABASE_URL.startswith('postgres://') or DATABASE_URL.startswith('postgresql://')):
    # PostgreSQL –Ω–∞ Render –∏–ª–∏ Railway - –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    if DATABASE_URL.startswith('postgres://'):
        DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
    if os.environ.get('RENDER'):
        logger.info("‚úÖ Using Render PostgreSQL database")
    elif os.environ.get('RAILWAY'):
        logger.info("‚úÖ Using Railway PostgreSQL database")
    else:
        logger.info("‚úÖ Using PostgreSQL database")
    logger.info(f"PostgreSQL URL: {DATABASE_URL[:50]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ URL
    logger.info("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ psycopg2")
elif os.environ.get('RENDER'):
    # SQLite –Ω–∞ Render (fallback)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/umay.db'
    logger.info("‚úÖ Using Render SQLite database in /tmp")
elif os.environ.get('RAILWAY'):
    # SQLite –Ω–∞ Railway (fallback)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/umay.db'
    logger.info("‚úÖ Using Railway SQLite database in /tmp")
else:
    # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    current_dir = os.getcwd()
    db_path = os.path.join(current_dir, 'data', 'umay.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
    logger.info("‚úÖ Using local SQLite database with absolute path")

logger.info(f"Database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
CITIES_DATA = {
    "–®—ã–º–∫–µ–Ω—Ç": [
        "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ—Ä–∏–Ω–∞—Ç–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
        "–ì–ö–ü –Ω–∞ –ü–•–í –ì–æ—Ä–æ–¥—Å–∫–æ–π —Ä–æ–¥–∏–ª—å–Ω—ã–π –¥–æ–º",
        "–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ - 2",
        "–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ - 3"
    ],
    "–Æ–ö–û": [
        "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º..."
    ],
    "–ê—Å—Ç–∞–Ω–∞": [
        "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º..."
    ]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with app.app_context():
    try:
        db.create_all()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    login = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    user_type = db.Column(db.String(20), default='user')  # user –∏–ª–∏ midwife
    position = db.Column(db.String(50), nullable=False)
    city = db.Column(db.String(50), nullable=False)
    medical_institution = db.Column(db.String(100), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# CMS –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class News(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    short_description = db.Column(db.Text, nullable=False)
    full_content = db.Column(db.Text, nullable=False)
    image_url = db.Column(db.String(500))
    category = db.Column(db.String(50), default='general')
    author = db.Column(db.String(100))
    published_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_published = db.Column(db.Boolean, default=True)
    views = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class MamaContent(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    category = db.Column(db.String(50), nullable=False)  # sport, nutrition, vitamins, body_care, baby_care, doctor_advice
    image_url = db.Column(db.String(500))
    video_url = db.Column(db.String(500))
    trimester = db.Column(db.String(20))  # 1, 2, 3, all
    difficulty_level = db.Column(db.String(20))  # easy, medium, hard
    duration = db.Column(db.String(50))  # –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    author = db.Column(db.String(100))
    is_published = db.Column(db.Boolean, default=True)
    views = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class MediaFile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(200), nullable=False)
    original_filename = db.Column(db.String(200), nullable=False)
    file_path = db.Column(db.String(500), nullable=False)
    file_type = db.Column(db.String(50), nullable=False)  # image, video, document
    file_size = db.Column(db.Integer)
    uploaded_by = db.Column(db.String(100))
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)

class Patient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20), nullable=False)
    patient_name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    pregnancy_weeks = db.Column(db.Integer, nullable=False)
    weight_before = db.Column(db.Float, nullable=False)
    weight_after = db.Column(db.Float, nullable=False)
    complications = db.Column(db.Text)
    notes = db.Column(db.Text)
    midwife = db.Column(db.String(100), nullable=False)
    birth_date = db.Column(db.String(20), nullable=False)
    birth_time = db.Column(db.String(10), nullable=False)
    child_gender = db.Column(db.String(10), nullable=False)
    child_weight = db.Column(db.Integer, nullable=False)
    delivery_method = db.Column(db.String(50), nullable=False)
    anesthesia = db.Column(db.String(50), nullable=False)
    blood_loss = db.Column(db.Integer, nullable=False)
    labor_duration = db.Column(db.Float, nullable=False)
    other_diseases = db.Column(db.Text)
    gestosis = db.Column(db.String(10), nullable=False)
    diabetes = db.Column(db.String(10), nullable=False)
    hypertension = db.Column(db.String(10), nullable=False)
    anemia = db.Column(db.String(10), nullable=False)
    infections = db.Column(db.String(10), nullable=False)
    placenta_pathology = db.Column(db.String(10), nullable=False)
    polyhydramnios = db.Column(db.String(10), nullable=False)
    oligohydramnios = db.Column(db.String(10), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    try:
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {app.config['SQLALCHEMY_DATABASE_URI']}")
        db.create_all()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        admin_user = User.query.filter_by(login='Joker').first()
        if not admin_user:
            admin_user = User(
                full_name='–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                login='Joker',
                password=generate_password_hash('19341934'),
                user_type='midwife',
                position='–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                city='–ê–ª–º–∞—Ç—ã',
                medical_institution='UMAY System'
            )
            db.session.add(admin_user)
            db.session.commit()
            logger.info("‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: login=Joker, password=19341934")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        traceback.print_exc()

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    latest_news = News.query.filter_by(is_published=True).order_by(News.published_at.desc()).limit(6).all()
    return render_template('index.html', news=latest_news)

@app.route('/api/cities')
def get_cities():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    return jsonify(list(CITIES_DATA.keys()))

@app.route('/api/institutions/<city>')
def get_institutions(city):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É"""
    if city in CITIES_DATA:
        return jsonify(CITIES_DATA[city])
    return jsonify([])

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        login = request.form['login']
        password = request.form['password']
        
        user = User.query.filter_by(login=login).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        user_type = request.form.get('user_type', 'midwife')
        full_name = request.form['full_name']
        login = request.form['login']
        password = request.form['password']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = User.query.filter_by(login=login).first()
        if existing_user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'error')
            return render_template('register.html')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = generate_password_hash(password)
        
        if user_type == 'user':
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            new_user = User(
                full_name=full_name,
                login=login,
                password=hashed_password,
                user_type='user',
                position='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                city='–ù–µ —É–∫–∞–∑–∞–Ω',
                medical_institution='–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            )
        else:
            # –ü–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∞–∫—É—à–µ—Ä–æ–∫
            position = request.form['position']
            city = request.form['city']
            medical_institution = request.form['medical_institution']
            
            new_user = User(
                full_name=full_name,
                login=login,
                password=hashed_password,
                user_type='midwife',
                position=position,
                city=city,
                medical_institution=medical_institution
            )
        
        try:
            db.session.add(new_user)
            db.session.commit()
            
            if user_type == 'user':
                flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMAY Mama!', 'success')
            else:
                flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ UMAY Pro.', 'success')
            
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
    
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!', 'success')
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_patients = Patient.query.count()
    boys_count = Patient.query.filter_by(child_gender='–ú–∞–ª—å—á–∏–∫').count()
    girls_count = Patient.query.filter_by(child_gender='–î–µ–≤–æ—á–∫–∞').count()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_patients > 0:
        avg_age = db.session.query(db.func.avg(Patient.age)).scalar() or 0
        avg_weight = db.session.query(db.func.avg(Patient.child_weight)).scalar() or 0
        children_percentage = ((boys_count + girls_count) / total_patients) * 100
    else:
        avg_age = avg_weight = children_percentage = 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º
    institution_stats = db.session.query(
        Patient.midwife,
        db.func.count(Patient.id).label('count')
    ).group_by(Patient.midwife).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    patients = Patient.query.order_by(Patient.created_at.desc()).limit(10).all()
    
    return render_template('dashboard.html', 
                         total_patients=total_patients,
                         boys=boys_count,
                         girls=girls_count,
                         avg_age=round(avg_age, 1),
                         avg_child_weight=round(avg_weight, 1),
                         institution_stats=institution_stats,
                         patients=patients)

@app.route('/add_patient', methods=['GET', 'POST'])
@login_required
def add_patient():
    if request.method == 'POST':
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ - –µ—Å–ª–∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω, —Ç–æ "–ù–µ—Ç"
            gestosis = "–î–∞" if 'gestosis' in request.form else "–ù–µ—Ç"
            diabetes = "–î–∞" if 'diabetes' in request.form else "–ù–µ—Ç"
            hypertension = "–î–∞" if 'hypertension' in request.form else "–ù–µ—Ç"
            anemia = "–î–∞" if 'anemia' in request.form else "–ù–µ—Ç"
            infections = "–î–∞" if 'infections' in request.form else "–ù–µ—Ç"
            placenta_pathology = "–î–∞" if 'placenta_pathology' in request.form else "–ù–µ—Ç"
            polyhydramnios = "–î–∞" if 'polyhydramnios' in request.form else "–ù–µ—Ç"
            oligohydramnios = "–î–∞" if 'oligohydramnios' in request.form else "–ù–µ—Ç"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not request.form['patient_name'] or request.form['patient_name'].strip() == "":
                flash('–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
                return render_template('add_patient.html')
            
            if not request.form['child_gender'] or request.form['child_gender'] == "":
                flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞', 'error')
                return render_template('add_patient.html')
            
            if not request.form['delivery_method'] or request.form['delivery_method'] == "":
                flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', 'error')
                return render_template('add_patient.html')
            
            if not request.form['anesthesia'] or request.form['anesthesia'] == "":
                flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–Ω–µ—Å—Ç–µ–∑–∏–∏', 'error')
                return render_template('add_patient.html')
            
            new_patient = Patient(
                date=datetime.now().strftime("%Y-%m-%d %H:%M"),
                patient_name=request.form['patient_name'].strip(),
                age=int(request.form['age']),
                pregnancy_weeks=int(request.form['pregnancy_weeks']),
                weight_before=float(request.form['weight_before']),
                weight_after=float(request.form['weight_after']),
                complications=request.form['complications'] or "",
                notes=request.form['notes'] or "",
                midwife=current_user.full_name,
                birth_date=request.form['birth_date'],
                birth_time=request.form['birth_time'],
                child_gender=request.form['child_gender'],
                child_weight=int(request.form['child_weight']),
                delivery_method=request.form['delivery_method'],
                anesthesia=request.form['anesthesia'],
                blood_loss=int(request.form['blood_loss']),
                labor_duration=float(request.form['labor_duration']),
                other_diseases=request.form['other_diseases'] or "",
                gestosis=gestosis,
                diabetes=diabetes,
                hypertension=hypertension,
                anemia=anemia,
                infections=infections,
                placenta_pathology=placenta_pathology,
                polyhydramnios=polyhydramnios,
                oligohydramnios=oligohydramnios
            )
            
            db.session.add(new_patient)
            db.session.commit()
            flash('–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('dashboard'))
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.', 'error')
    
    return render_template('add_patient.html')

@app.route('/search')
@login_required
def search():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_query = request.args.get('search', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    selected_midwives = request.args.getlist('midwives')
    selected_methods = request.args.getlist('delivery_methods')
    selected_genders = request.args.getlist('genders')
    age_min = request.args.get('age_min', '')
    age_max = request.args.get('age_max', '')
    weight_min = request.args.get('weight_min', '')
    weight_max = request.args.get('weight_max', '')
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Patient.query
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search_query:
        query = query.filter(Patient.patient_name.contains(search_query))
    if date_from:
        query = query.filter(Patient.birth_date >= date_from)
    if date_to:
        query = query.filter(Patient.birth_date <= date_to)
    if selected_midwives:
        query = query.filter(Patient.midwife.in_(selected_midwives))
    if selected_methods:
        query = query.filter(Patient.delivery_method.in_(selected_methods))
    if selected_genders:
        query = query.filter(Patient.child_gender.in_(selected_genders))
    if age_min:
        query = query.filter(Patient.age >= int(age_min))
    if age_max:
        query = query.filter(Patient.age <= int(age_max))
    if weight_min:
        query = query.filter(Patient.child_weight >= int(weight_min))
    if weight_max:
        query = query.filter(Patient.child_weight <= int(weight_max))
    
    patients = query.all()
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    midwives = db.session.query(Patient.midwife).distinct().all()
    delivery_methods = db.session.query(Patient.delivery_method).distinct().all()
    genders = db.session.query(Patient.child_gender).distinct().all()
    
    return render_template('search.html', 
                         patients=patients,
                         midwives=[m[0] for m in midwives],
                         delivery_methods=[d[0] for d in delivery_methods],
                         genders=[g[0] for g in genders])

@app.route('/profile')
@login_required
def profile():
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_patients = Patient.query.filter_by(midwife=current_user.full_name).count()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_patients > 0:
        avg_age = db.session.query(db.func.avg(Patient.age)).filter_by(midwife=current_user.full_name).scalar() or 0
        avg_weight = db.session.query(db.func.avg(Patient.child_weight)).filter_by(midwife=current_user.full_name).scalar() or 0
    else:
        avg_age = avg_weight = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_patients = Patient.query.filter_by(midwife=current_user.full_name).order_by(Patient.created_at.desc()).limit(5).all()
    
    return render_template('profile.html', 
                         total_patients=total_patients,
                         avg_age=round(avg_age, 1),
                         avg_child_weight=round(avg_weight, 1),
                         recent_patients=recent_patients)

# ============================================================================
# CMS –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –ú–ê–†–®–†–£–¢–´
# ============================================================================

@app.route('/admin')
@login_required
def admin_panel():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error')
        return redirect(url_for('dashboard'))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    news_count = News.query.count()
    mama_content_count = MamaContent.query.count()
    media_count = MediaFile.query.count()
    patients_count = Patient.query.count()
    
    return render_template('admin/dashboard.html', 
                         news_count=news_count,
                         mama_content_count=mama_content_count,
                         media_count=media_count,
                         patients_count=patients_count)

@app.route('/admin/news')
@login_required
def admin_news():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    news = News.query.order_by(News.created_at.desc()).all()
    return render_template('admin/news.html', news=news)

@app.route('/admin/news/add', methods=['GET', 'POST'])
@login_required
def admin_news_add():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    if request.method == 'POST':
        title = request.form.get('title')
        short_description = request.form.get('short_description')
        full_content = request.form.get('full_content')
        category = request.form.get('category', 'general')
        image_url = request.form.get('image_url')
        
        news = News(
            title=title,
            short_description=short_description,
            full_content=full_content,
            category=category,
            image_url=image_url,
            author=current_user.full_name
        )
        
        db.session.add(news)
        db.session.commit()
        
        flash('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
        return redirect(url_for('admin_news'))
    
    return render_template('admin/news_form.html')

@app.route('/admin/news/edit/<int:news_id>', methods=['GET', 'POST'])
@login_required
def admin_news_edit(news_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    news = News.query.get_or_404(news_id)
    
    if request.method == 'POST':
        news.title = request.form.get('title')
        news.short_description = request.form.get('short_description')
        news.full_content = request.form.get('full_content')
        news.category = request.form.get('category', 'general')
        news.image_url = request.form.get('image_url')
        news.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        flash('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
        return redirect(url_for('admin_news'))
    
    return render_template('admin/news_form.html', news=news)

@app.route('/admin/news/delete/<int:news_id>', methods=['POST'])
@login_required
def admin_news_delete(news_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'}), 403
    
    news = News.query.get_or_404(news_id)
    
    try:
        db.session.delete(news)
        db.session.commit()
        return jsonify({'success': True, 'message': '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.'}), 500

@app.route('/admin/mama-content')
@login_required
def admin_mama_content():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    content = MamaContent.query.order_by(MamaContent.created_at.desc()).all()
    return render_template('admin/mama_content.html', content=content)

@app.route('/admin/mama-content/add', methods=['GET', 'POST'])
@login_required
def admin_mama_content_add():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')
        category = request.form.get('category')
        image_url = request.form.get('image_url')
        video_url = request.form.get('video_url')
        trimester = request.form.get('trimester')
        difficulty_level = request.form.get('difficulty_level')
        duration = request.form.get('duration')
        
        mama_content = MamaContent(
            title=title,
            content=content,
            category=category,
            image_url=image_url,
            video_url=video_url,
            trimester=trimester,
            difficulty_level=difficulty_level,
            duration=duration,
            author=current_user.full_name
        )
        
        db.session.add(mama_content)
        db.session.commit()
        
        flash('–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('admin_mama_content'))
    
    return render_template('admin/mama_content_form.html')

@app.route('/admin/media')
@login_required
def admin_media():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'error')
        return redirect(url_for('dashboard'))
    
    media = MediaFile.query.order_by(MediaFile.uploaded_at.desc()).all()
    return render_template('admin/media.html', media=media)

@app.route('/admin/media/upload', methods=['POST'])
@login_required
def admin_media_upload():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    if not (current_user.user_type == 'midwife' or current_user.login == 'Joker'):
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'}), 403
    
    if 'file' not in request.files:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
    
    if file:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        os.makedirs('static/uploads', exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import uuid
        filename = str(uuid.uuid4()) + '.' + file.filename.rsplit('.', 1)[1].lower()
        file_path = os.path.join('static/uploads', filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file.save(file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = 'image' if file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')) else 'document'
        if file.filename.lower().endswith(('.mp4', '.avi', '.mov', '.wmv')):
            file_type = 'video'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        media_file = MediaFile(
            filename=filename,
            original_filename=file.filename,
            file_path=file_path,
            file_type=file_type,
            file_size=os.path.getsize(file_path),
            uploaded_by=current_user.full_name
        )
        
        db.session.add(media_file)
        db.session.commit()
        
        return jsonify({
            'success': True,
            'filename': filename,
            'url': url_for('static', filename=f'uploads/{filename}')
        })
    
    return jsonify({'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'}), 500

# ============================================================================
# –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ö–û–ù–¢–ï–ù–¢–ê
# ============================================================================

@app.route('/news')
def news_list():
    """–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    news = News.query.filter_by(is_published=True).order_by(News.published_at.desc()).all()
    return render_template('news/list.html', news=news)

@app.route('/news/<int:news_id>')
def news_detail(news_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    news = News.query.get_or_404(news_id)
    if news.is_published:
        news.views += 1
        db.session.commit()
    return render_template('news/detail.html', news=news)

@app.route('/mama')
def mama_content():
    """–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    categories = {
        'sport': '–°–ø–æ—Ä—Ç',
        'nutrition': '–ü–∏—Ç–∞–Ω–∏–µ', 
        'vitamins': '–í–∏—Ç–∞–º–∏–Ω—ã',
        'body_care': '–£—Ö–æ–¥ –∑–∞ —Ç–µ–ª–æ–º',
        'baby_care': '–£—Ö–æ–¥ –∑–∞ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–º',
        'doctor_advice': '–°–æ–≤–µ—Ç—ã –≤—Ä–∞—á–µ–π'
    }
    
    selected_category = request.args.get('category', 'sport')
    content = MamaContent.query.filter_by(
        category=selected_category, 
        is_published=True
    ).order_by(MamaContent.created_at.desc()).all()
    
    return render_template('mama/content.html', 
                         content=content, 
                         categories=categories,
                         selected_category=selected_category)

@app.route('/export_csv')
@login_required
def export_csv():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patients = Patient.query.all()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    data = []
    for patient in patients:
        data.append({
            '–î–∞—Ç–∞': patient.date,
            '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã': patient.patient_name,
            '–í–æ–∑—Ä–∞—Å—Ç': patient.age,
            '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏': patient.pregnancy_weeks,
            '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤': patient.weight_before,
            '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤': patient.weight_after,
            '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è': patient.complications,
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': patient.notes,
            '–ê–∫—É—à–µ—Ä–∫–∞': patient.midwife,
            '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤': patient.birth_date,
            '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤': patient.birth_time,
            '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞': patient.child_gender,
            '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞': patient.child_weight,
            '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è': patient.delivery_method,
            '–ê–Ω–µ—Å—Ç–µ–∑–∏—è': patient.anesthesia,
            '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è': patient.blood_loss,
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤': patient.labor_duration,
            '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': patient.other_diseases,
            '–ì–µ—Å—Ç–æ–∑': patient.gestosis,
            '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç': patient.diabetes,
            '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': patient.hypertension,
            '–ê–Ω–µ–º–∏—è': patient.anemia,
            '–ò–Ω—Ñ–µ–∫—Ü–∏–∏': patient.infections,
            '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã': patient.placenta_pathology,
            '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ': patient.polyhydramnios,
            '–ú–∞–ª–æ–≤–æ–¥–∏–µ': patient.oligohydramnios
        })
    
    df = pd.DataFrame(data)
    output = io.StringIO()
    df.to_csv(output, index=False, encoding='utf-8-sig')
    output.seek(0)
    
    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8-sig')),
        mimetype='text/csv',
        as_attachment=True,
        download_name=f'umay_report_{datetime.now().strftime("%Y%m%d_%H%M")}.csv'
    )

if __name__ == '__main__':
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ app.py (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ run_local.py –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    print("‚ö†Ô∏è  –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python run_local.py")
    print("üì± –ò–ª–∏: python run_public.py –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏")
    sys.exit(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal Server Error: {error}")
    return "Internal Server Error", 500

@app.errorhandler(404)
def not_found_error(error):
    logger.error(f"Not Found Error: {error}")
    return "Not Found", 404 