from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import pandas as pd
import io
import os
import sys
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

# ============================================================================
# –í–ê–ñ–ù–û: –≠–¢–û –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–°–ë–û–† –î–õ–Ø RENDER
# –ü—Ä–æ–±–ª–µ–º–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite –≤–º–µ—Å—Ç–æ PostgreSQL
# –†–µ—à–µ–Ω–∏–µ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
# ============================================================================

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–°–ë–û–† –î–õ–Ø RAILWAY - –í–ï–†–°–ò–Ø 2.0
# –ü—Ä–æ–±–ª–µ–º–∞: Railway –Ω–µ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
# –†–µ—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∞
# ============================================================================
logger.info("=== UMAY APP STARTING - RAILWAY FORCED REBUILD v2.0 ===")

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('data', exist_ok=True)
logger.info("Data directory created/verified")

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –¥–ª—è Render - PostgreSQL
database_url = os.environ.get('DATABASE_URL')
logger.info("=" * 50)
logger.info("–ü–†–û–í–ï–†–ö–ê DATABASE_URL:")
logger.info(f"DATABASE_URL from environment: {database_url}")
logger.info(f"Type of DATABASE_URL: {type(database_url)}")
logger.info(f"Length of DATABASE_URL: {len(database_url) if database_url else 0}")
logger.info("=" * 50)

if database_url and (database_url.startswith('postgresql://') or database_url.startswith('postgres://')):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –µ—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL
    logger.info("‚úÖ –ù–ê–ô–î–ï–ù DATABASE_URL - –ò–°–ü–û–õ–¨–ó–£–ï–ú POSTGRESQL")
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
        logger.info("‚úÖ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù postgres:// –≤ postgresql://")
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
    logger.info("‚úÖ Using PostgreSQL database")
else:
    # Fallback –∫ SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    logger.info("‚ùå DATABASE_URL –ù–ï –ù–ê–ô–î–ï–ù - –ò–°–ü–û–õ–¨–ó–£–ï–ú SQLITE")
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////Users/sapargali/Desktop/UMAY_stat/data/umay.db'
    logger.info("‚ùå Using local SQLite database configuration")

logger.info(f"Final database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")
logger.info("=" * 50)

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# ============================================================================
# –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –î–õ–Ø RAILWAY
# ============================================================================
with app.app_context():
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        db.create_all()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        logger.info("‚úÖ PostgreSQL —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        try:
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
            db.create_all()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏!")
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    login = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    position = db.Column(db.String(50), nullable=False)
    medical_institution = db.Column(db.String(100), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Patient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20), nullable=False)
    patient_name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    pregnancy_weeks = db.Column(db.Integer, nullable=False)
    weight_before = db.Column(db.Float, nullable=False)
    weight_after = db.Column(db.Float, nullable=False)
    complications = db.Column(db.Text)
    notes = db.Column(db.Text)
    midwife = db.Column(db.String(100), nullable=False)
    birth_date = db.Column(db.String(20), nullable=False)
    birth_time = db.Column(db.String(10), nullable=False)
    child_gender = db.Column(db.String(10), nullable=False)
    child_weight = db.Column(db.Integer, nullable=False)
    delivery_method = db.Column(db.String(50), nullable=False)
    anesthesia = db.Column(db.String(50), nullable=False)
    blood_loss = db.Column(db.Integer, nullable=False)
    labor_duration = db.Column(db.Float, nullable=False)
    other_diseases = db.Column(db.Text)
    gestosis = db.Column(db.String(10), nullable=False)
    diabetes = db.Column(db.String(10), nullable=False)
    hypertension = db.Column(db.String(10), nullable=False)
    anemia = db.Column(db.String(10), nullable=False)
    infections = db.Column(db.String(10), nullable=False)
    placenta_pathology = db.Column(db.String(10), nullable=False)
    polyhydramnios = db.Column(db.String(10), nullable=False)
    oligohydramnios = db.Column(db.String(10), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        try:
            logger.info("Starting login process...")
            
            login = request.form.get('login')
            password = request.form.get('password')
            
            logger.info(f"Login attempt for user: {login}")
            
            user = User.query.filter_by(login=login).first()
            if user and check_password_hash(user.password, password):
                login_user(user)
                logger.info(f"User {login} successfully logged in")
                flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success')
                return redirect(url_for('dashboard'))
            else:
                logger.warning(f"Failed login attempt for user: {login}")
                flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!', 'error')
                
        except Exception as e:
            logger.error(f"Error during login: {e}")
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            logger.info("Starting registration process...")
            
            full_name = request.form.get('full_name')
            login = request.form.get('login')
            password = request.form.get('password')
            position = request.form.get('position')
            medical_institution = request.form.get('medical_institution')
            
            logger.info(f"Registration data received: {full_name}, {login}, {position}, {medical_institution}")
            
            if User.query.filter_by(login=login).first():
                logger.warning(f"Login {login} already exists")
                flash('–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!', 'error')
                return render_template('register.html')
            
            hashed_password = generate_password_hash(password)
            new_user = User(
                full_name=full_name,
                login=login,
                password=hashed_password,
                position=position,
                medical_institution=medical_institution
            )
            
            logger.info("Adding new user to database...")
            db.session.add(new_user)
            db.session.commit()
            logger.info("User successfully registered")
            
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success')
            return redirect(url_for('login'))
            
        except Exception as e:
            logger.error(f"Error during registration: {e}")
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}', 'error')
            return render_template('register.html')
    
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!', 'info')
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    patients = Patient.query.all()
    total_patients = len(patients)
    natural_births = len([p for p in patients if p.delivery_method == '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã'])
    c_sections = len([p for p in patients if p.delivery_method == '–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É –¥–µ—Ç–µ–π
    boys = len([p for p in patients if p.child_gender == '–ú–∞–ª—å—á–∏–∫'])
    girls = len([p for p in patients if p.child_gender == '–î–µ–≤–æ—á–∫–∞'])
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_age = sum(p.age for p in patients) / len(patients) if patients else 0
    avg_child_weight = sum(p.child_weight for p in patients) / len(patients) if patients else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    recent_patients = Patient.query.order_by(Patient.created_at.desc()).limit(10).all()
    
    return render_template('dashboard.html',
                         total_patients=total_patients,
                         natural_births=natural_births,
                         c_sections=c_sections,
                         boys=boys,
                         girls=girls,
                         avg_age=avg_age,
                         avg_child_weight=avg_child_weight,
                         patients=recent_patients)

@app.route('/add_patient', methods=['GET', 'POST'])
@login_required
def add_patient():
    if request.method == 'POST':
        patient_data = {
            'date': datetime.now().strftime("%Y-%m-%d %H:%M"),
            'patient_name': request.form.get('patient_name'),
            'age': int(request.form.get('age')),
            'pregnancy_weeks': int(request.form.get('pregnancy_weeks')),
            'weight_before': float(request.form.get('weight_before')),
            'weight_after': float(request.form.get('weight_after')),
            'complications': request.form.get('complications'),
            'notes': request.form.get('notes'),
            'midwife': current_user.full_name,
            'birth_date': request.form.get('birth_date'),
            'birth_time': request.form.get('birth_time'),
            'child_gender': request.form.get('child_gender'),
            'child_weight': int(request.form.get('child_weight')),
            'delivery_method': request.form.get('delivery_method'),
            'anesthesia': request.form.get('anesthesia'),
            'blood_loss': int(request.form.get('blood_loss')),
            'labor_duration': float(request.form.get('labor_duration')),
            'other_diseases': request.form.get('other_diseases'),
            'gestosis': '–î–∞' if request.form.get('gestosis') else '–ù–µ—Ç',
            'diabetes': '–î–∞' if request.form.get('diabetes') else '–ù–µ—Ç',
            'hypertension': '–î–∞' if request.form.get('hypertension') else '–ù–µ—Ç',
            'anemia': '–î–∞' if request.form.get('anemia') else '–ù–µ—Ç',
            'infections': '–î–∞' if request.form.get('infections') else '–ù–µ—Ç',
            'placenta_pathology': '–î–∞' if request.form.get('placenta_pathology') else '–ù–µ—Ç',
            'polyhydramnios': '–î–∞' if request.form.get('polyhydramnios') else '–ù–µ—Ç',
            'oligohydramnios': '–î–∞' if request.form.get('oligohydramnios') else '–ù–µ—Ç'
        }
        
        new_patient = Patient(**patient_data)
        db.session.add(new_patient)
        db.session.commit()
        
        flash('–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–µ–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success')
        return redirect(url_for('dashboard'))
    
    return render_template('add_patient.html')

@app.route('/search')
@login_required
def search():
    patients = Patient.query.all()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_patients = patients
    
    # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
    search_term = request.args.get('search', '').strip()
    if search_term:
        filtered_patients = [p for p in filtered_patients if search_term.lower() in p.patient_name.lower()]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    if date_from:
        filtered_patients = [p for p in filtered_patients if p.birth_date >= date_from]
    if date_to:
        filtered_patients = [p for p in filtered_patients if p.birth_date <= date_to]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—É—à–µ—Ä–∫–∞–º
    selected_midwives = request.args.getlist('midwives')
    if selected_midwives:
        filtered_patients = [p for p in filtered_patients if p.midwife in selected_midwives]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–æ—Å–æ–±—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    selected_methods = request.args.getlist('delivery_methods')
    if selected_methods:
        filtered_patients = [p for p in filtered_patients if p.delivery_method in selected_methods]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É —Ä–µ–±–µ–Ω–∫–∞
    selected_genders = request.args.getlist('genders')
    if selected_genders:
        filtered_patients = [p for p in filtered_patients if p.child_gender in selected_genders]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age_min = request.args.get('age_min', '')
    age_max = request.args.get('age_max', '')
    if age_min:
        filtered_patients = [p for p in filtered_patients if p.age >= int(age_min)]
    if age_max:
        filtered_patients = [p for p in filtered_patients if p.age <= int(age_max)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Å—É —Ä–µ–±–µ–Ω–∫–∞
    weight_min = request.args.get('weight_min', '')
    weight_max = request.args.get('weight_max', '')
    if weight_min:
        filtered_patients = [p for p in filtered_patients if p.child_weight >= int(weight_min)]
    if weight_max:
        filtered_patients = [p for p in filtered_patients if p.child_weight <= int(weight_max)]
    
    return render_template('search.html', patients=patients, filtered_patients=filtered_patients)

@app.route('/export_csv')
@login_required
def export_csv():
    patients = Patient.query.all()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö –∂–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —á—Ç–æ –∏ –≤ –ø–æ–∏—Å–∫–µ
    filtered_patients = patients
    
    # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
    search_term = request.args.get('search', '').strip()
    if search_term:
        filtered_patients = [p for p in filtered_patients if search_term.lower() in p.patient_name.lower()]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    if date_from:
        filtered_patients = [p for p in filtered_patients if p.birth_date >= date_from]
    if date_to:
        filtered_patients = [p for p in filtered_patients if p.birth_date <= date_to]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—É—à–µ—Ä–∫–∞–º
    selected_midwives = request.args.getlist('midwives')
    if selected_midwives:
        filtered_patients = [p for p in filtered_patients if p.midwife in selected_midwives]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–æ—Å–æ–±—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    selected_methods = request.args.getlist('delivery_methods')
    if selected_methods:
        filtered_patients = [p for p in filtered_patients if p.delivery_method in selected_methods]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É —Ä–µ–±–µ–Ω–∫–∞
    selected_genders = request.args.getlist('genders')
    if selected_genders:
        filtered_patients = [p for p in filtered_patients if p.child_gender in selected_genders]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age_min = request.args.get('age_min', '')
    age_max = request.args.get('age_max', '')
    if age_min:
        filtered_patients = [p for p in filtered_patients if p.age >= int(age_min)]
    if age_max:
        filtered_patients = [p for p in filtered_patients if p.age <= int(age_max)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Å—É —Ä–µ–±–µ–Ω–∫–∞
    weight_min = request.args.get('weight_min', '')
    weight_max = request.args.get('weight_max', '')
    if weight_min:
        filtered_patients = [p for p in filtered_patients if p.child_weight >= int(weight_min)]
    if weight_max:
        filtered_patients = [p for p in filtered_patients if p.child_weight <= int(weight_max)]
    
    data = []
    for patient in filtered_patients:
        data.append({
            '–î–∞—Ç–∞': patient.date,
            '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã': patient.patient_name,
            '–í–æ–∑—Ä–∞—Å—Ç': patient.age,
            '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏': patient.pregnancy_weeks,
            '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤': patient.weight_before,
            '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤': patient.weight_after,
            '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è': patient.complications,
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': patient.notes,
            '–ê–∫—É—à–µ—Ä–∫–∞': patient.midwife,
            '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤': patient.birth_date,
            '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤': patient.birth_time,
            '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞': patient.child_gender,
            '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞': patient.child_weight,
            '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è': patient.delivery_method,
            '–ê–Ω–µ—Å—Ç–µ–∑–∏—è': patient.anesthesia,
            '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è': patient.blood_loss,
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤': patient.labor_duration,
            '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': patient.other_diseases,
            '–ì–µ—Å—Ç–æ–∑': patient.gestosis,
            '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç': patient.diabetes,
            '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': patient.hypertension,
            '–ê–Ω–µ–º–∏—è': patient.anemia,
            '–ò–Ω—Ñ–µ–∫—Ü–∏–∏': patient.infections,
            '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã': patient.placenta_pathology,
            '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ': patient.polyhydramnios,
            '–ú–∞–ª–æ–≤–æ–¥–∏–µ': patient.oligohydramnios
        })
    
    df = pd.DataFrame(data)
    output = io.StringIO()
    df.to_csv(output, index=False, encoding='utf-8-sig')
    output.seek(0)
    
    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8-sig')),
        mimetype='text/csv',
        as_attachment=True,
        download_name=f'umay_report_{datetime.now().strftime("%Y%m%d_%H%M")}.csv'
    )

if __name__ == '__main__':
    # ============================================================================
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–°–ë–û–† –î–õ–Ø RAILWAY - –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢
    # ============================================================================
    with app.app_context():
        try:
            db.create_all()
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5001, –¥–ª—è Railway - –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5001))
    logger.info(f"üöÄ Starting application on port {port}")
    app.run(debug=True, host='0.0.0.0', port=port)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal Server Error: {error}")
    return "Internal Server Error", 500

@app.errorhandler(404)
def not_found_error(error):
    logger.error(f"Not Found Error: {error}")
    return "Not Found", 404 