from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import pandas as pd
import io
import os
import sys
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

# ============================================================================
# UMAY APP - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RENDER
# –í–µ—Ä—Å–∏—è: 5.0 - –¢–æ–ª—å–∫–æ SQLite –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info("=== UMAY APP STARTING - SIMPLE VERSION v5.0 ===")

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    os.makedirs('data', exist_ok=True)
    logger.info("Data directory created/verified")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ data: {e}")
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ data: {e}")

# –ü–†–û–°–¢–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• - –¢–û–õ–¨–ö–û SQLITE
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è Render
if os.environ.get('RENDER'):
    # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è –∑–∞–ø–∏—Å–∏
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/umay.db'
    logger.info("‚úÖ Using Render SQLite database in /tmp")
else:
    # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    current_dir = os.getcwd()
    db_path = os.path.join(current_dir, 'data', 'umay.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
    logger.info("‚úÖ Using local SQLite database with absolute path")

logger.info(f"Database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    login = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    position = db.Column(db.String(50), nullable=False)
    medical_institution = db.Column(db.String(100), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Patient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20), nullable=False)
    patient_name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    pregnancy_weeks = db.Column(db.Integer, nullable=False)
    weight_before = db.Column(db.Float, nullable=False)
    weight_after = db.Column(db.Float, nullable=False)
    complications = db.Column(db.Text)
    notes = db.Column(db.Text)
    midwife = db.Column(db.String(100), nullable=False)
    birth_date = db.Column(db.String(20), nullable=False)
    birth_time = db.Column(db.String(10), nullable=False)
    child_gender = db.Column(db.String(10), nullable=False)
    child_weight = db.Column(db.Integer, nullable=False)
    delivery_method = db.Column(db.String(50), nullable=False)
    anesthesia = db.Column(db.String(50), nullable=False)
    blood_loss = db.Column(db.Integer, nullable=False)
    labor_duration = db.Column(db.Float, nullable=False)
    other_diseases = db.Column(db.Text)
    gestosis = db.Column(db.String(10), nullable=False)
    diabetes = db.Column(db.String(10), nullable=False)
    hypertension = db.Column(db.String(10), nullable=False)
    anemia = db.Column(db.String(10), nullable=False)
    infections = db.Column(db.String(10), nullable=False)
    placenta_pathology = db.Column(db.String(10), nullable=False)
    polyhydramnios = db.Column(db.String(10), nullable=False)
    oligohydramnios = db.Column(db.String(10), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    try:
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {app.config['SQLALCHEMY_DATABASE_URI']}")
        db.create_all()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        traceback.print_exc()

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        login = request.form['login']
        password = request.form['password']
        
        user = User.query.filter_by(login=login).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        full_name = request.form['full_name']
        login = request.form['login']
        password = request.form['password']
        position = request.form['position']
        medical_institution = request.form['medical_institution']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = User.query.filter_by(login=login).first()
        if existing_user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'error')
            return render_template('register.html')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = generate_password_hash(password)
        new_user = User(
            full_name=full_name,
            login=login,
            password=hashed_password,
            position=position,
            medical_institution=medical_institution
        )
        
        try:
            db.session.add(new_user)
            db.session.commit()
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', 'success')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
    
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!', 'success')
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_patients = Patient.query.count()
    boys_count = Patient.query.filter_by(child_gender='–ú–∞–ª—å—á–∏–∫').count()
    girls_count = Patient.query.filter_by(child_gender='–î–µ–≤–æ—á–∫–∞').count()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_patients > 0:
        avg_age = db.session.query(db.func.avg(Patient.age)).scalar() or 0
        avg_weight = db.session.query(db.func.avg(Patient.child_weight)).scalar() or 0
        children_percentage = ((boys_count + girls_count) / total_patients) * 100
    else:
        avg_age = avg_weight = children_percentage = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    patients = Patient.query.order_by(Patient.created_at.desc()).limit(10).all()
    
    return render_template('dashboard.html', 
                         total_patients=total_patients,
                         boys=boys_count,
                         girls=girls_count,
                         avg_age=round(avg_age, 1),
                         avg_child_weight=round(avg_weight, 1),
                         patients=patients)

@app.route('/add_patient', methods=['GET', 'POST'])
@login_required
def add_patient():
    if request.method == 'POST':
        try:
            new_patient = Patient(
                date=request.form['date'],
                patient_name=request.form['patient_name'],
                age=int(request.form['age']),
                pregnancy_weeks=int(request.form['pregnancy_weeks']),
                weight_before=float(request.form['weight_before']),
                weight_after=float(request.form['weight_after']),
                complications=request.form['complications'],
                notes=request.form['notes'],
                midwife=request.form['midwife'],
                birth_date=request.form['birth_date'],
                birth_time=request.form['birth_time'],
                child_gender=request.form['child_gender'],
                child_weight=int(request.form['child_weight']),
                delivery_method=request.form['delivery_method'],
                anesthesia=request.form['anesthesia'],
                blood_loss=int(request.form['blood_loss']),
                labor_duration=float(request.form['labor_duration']),
                other_diseases=request.form['other_diseases'],
                gestosis=request.form['gestosis'],
                diabetes=request.form['diabetes'],
                hypertension=request.form['hypertension'],
                anemia=request.form['anemia'],
                infections=request.form['infections'],
                placenta_pathology=request.form['placenta_pathology'],
                polyhydramnios=request.form['polyhydramnios'],
                oligohydramnios=request.form['oligohydramnios']
            )
            
            db.session.add(new_patient)
            db.session.commit()
            flash('–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('dashboard'))
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.', 'error')
    
    return render_template('add_patient.html')

@app.route('/search')
@login_required
def search():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_query = request.args.get('search', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    selected_midwives = request.args.getlist('midwives')
    selected_methods = request.args.getlist('delivery_methods')
    selected_genders = request.args.getlist('genders')
    age_min = request.args.get('age_min', '')
    age_max = request.args.get('age_max', '')
    weight_min = request.args.get('weight_min', '')
    weight_max = request.args.get('weight_max', '')
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Patient.query
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search_query:
        query = query.filter(Patient.patient_name.contains(search_query))
    if date_from:
        query = query.filter(Patient.birth_date >= date_from)
    if date_to:
        query = query.filter(Patient.birth_date <= date_to)
    if selected_midwives:
        query = query.filter(Patient.midwife.in_(selected_midwives))
    if selected_methods:
        query = query.filter(Patient.delivery_method.in_(selected_methods))
    if selected_genders:
        query = query.filter(Patient.child_gender.in_(selected_genders))
    if age_min:
        query = query.filter(Patient.age >= int(age_min))
    if age_max:
        query = query.filter(Patient.age <= int(age_max))
    if weight_min:
        query = query.filter(Patient.child_weight >= int(weight_min))
    if weight_max:
        query = query.filter(Patient.child_weight <= int(weight_max))
    
    patients = query.all()
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    midwives = db.session.query(Patient.midwife).distinct().all()
    delivery_methods = db.session.query(Patient.delivery_method).distinct().all()
    genders = db.session.query(Patient.child_gender).distinct().all()
    
    return render_template('search.html', 
                         patients=patients,
                         midwives=[m[0] for m in midwives],
                         delivery_methods=[d[0] for d in delivery_methods],
                         genders=[g[0] for g in genders])

@app.route('/export_csv')
@login_required
def export_csv():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patients = Patient.query.all()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    data = []
    for patient in patients:
        data.append({
            '–î–∞—Ç–∞': patient.date,
            '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã': patient.patient_name,
            '–í–æ–∑—Ä–∞—Å—Ç': patient.age,
            '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏': patient.pregnancy_weeks,
            '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤': patient.weight_before,
            '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤': patient.weight_after,
            '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è': patient.complications,
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': patient.notes,
            '–ê–∫—É—à–µ—Ä–∫–∞': patient.midwife,
            '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤': patient.birth_date,
            '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤': patient.birth_time,
            '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞': patient.child_gender,
            '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞': patient.child_weight,
            '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è': patient.delivery_method,
            '–ê–Ω–µ—Å—Ç–µ–∑–∏—è': patient.anesthesia,
            '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è': patient.blood_loss,
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤': patient.labor_duration,
            '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': patient.other_diseases,
            '–ì–µ—Å—Ç–æ–∑': patient.gestosis,
            '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç': patient.diabetes,
            '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': patient.hypertension,
            '–ê–Ω–µ–º–∏—è': patient.anemia,
            '–ò–Ω—Ñ–µ–∫—Ü–∏–∏': patient.infections,
            '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã': patient.placenta_pathology,
            '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ': patient.polyhydramnios,
            '–ú–∞–ª–æ–≤–æ–¥–∏–µ': patient.oligohydramnios
        })
    
    df = pd.DataFrame(data)
    output = io.StringIO()
    df.to_csv(output, index=False, encoding='utf-8-sig')
    output.seek(0)
    
    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8-sig')),
        mimetype='text/csv',
        as_attachment=True,
        download_name=f'umay_report_{datetime.now().strftime("%Y%m%d_%H%M")}.csv'
    )

if __name__ == '__main__':
    # ============================================================================
    # –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢
    # ============================================================================
    with app.app_context():
        try:
            db.create_all()
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5001, –¥–ª—è Render - –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5001))
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
    ports_to_try = [port, 5002, 5003, 5004, 5005]
    
    for try_port in ports_to_try:
        try:
            logger.info(f"üöÄ Starting application on port {try_port}")
            app.run(debug=True, host='0.0.0.0', port=try_port)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except OSError as e:
            if "Address already in use" in str(e):
                logger.warning(f"–ü–æ—Ä—Ç {try_port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
            else:
                raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal Server Error: {error}")
    return "Internal Server Error", 500

@app.errorhandler(404)
def not_found_error(error):
    logger.error(f"Not Found Error: {error}")
    return "Not Found", 404 