import streamlit as st
import pandas as pd
import os
from datetime import datetime, time, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="UMAY - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–∫—É—à–µ—Ä–æ–∫",
    page_icon="üë∂",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
def load_css():
    with open('styles/custom.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

load_css()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'current_user' not in st.session_state:
    st.session_state.current_user = None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_registrations():
    if os.path.exists('data/registrations.csv'):
        return pd.read_csv('data/registrations.csv')
    else:
        return pd.DataFrame(columns=['–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ', '–õ–æ–≥–∏–Ω', '–ü–∞—Ä–æ–ª—å'])

def load_users():
    if os.path.exists('data/users.csv'):
        return pd.read_csv('data/users.csv')
    else:
        return pd.DataFrame(columns=['–§–ò–û', '–õ–æ–≥–∏–Ω', '–ü–∞—Ä–æ–ª—å', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ'])

def save_user(user_data):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    df = load_users()
    new_row = pd.DataFrame([user_data], columns=['–§–ò–û', '–õ–æ–≥–∏–Ω', '–ü–∞—Ä–æ–ª—å', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ'])
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv('data/users.csv', index=False)

def check_user_login(login, password):
    df = load_users()
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.write(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ª–æ–≥–∏–Ω='{login}', –ø–∞—Ä–æ–ª—å='{password}'")
    st.write(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(df)}")
    if not df.empty:
        st.write("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:")
        st.write(df[['–õ–æ–≥–∏–Ω', '–ü–∞—Ä–æ–ª—å']].to_string())
    
    user = df[(df['–õ–æ–≥–∏–Ω'] == login) & (df['–ü–∞—Ä–æ–ª—å'] == password)]
    if not user.empty:
        return user.iloc[0]['–§–ò–û']
    return None

def save_registration(data):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    df = load_registrations()
    new_row = pd.DataFrame([data], columns=['–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ'])
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv('data/registrations.csv', index=False)

def load_patients_data():
    if os.path.exists('data/patients.csv'):
        return pd.read_csv('data/patients.csv')
    else:
        return pd.DataFrame(columns=[
            '–î–∞—Ç–∞', '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã', '–í–æ–∑—Ä–∞—Å—Ç', '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏', 
            '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤', '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤', '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
            '–ê–∫—É—à–µ—Ä–∫–∞', '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤', '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤', '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞', '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞',
            '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', '–ê–Ω–µ—Å—Ç–µ–∑–∏—è', '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤',
            '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è', '–ì–µ—Å—Ç–æ–∑', '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç', '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
            '–ê–Ω–µ–º–∏—è', '–ò–Ω—Ñ–µ–∫—Ü–∏–∏', '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã', '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ', '–ú–∞–ª–æ–≤–æ–¥–∏–µ'
        ])

def save_patient_data(data):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    df = load_patients_data()
    new_row = pd.DataFrame([data], columns=[
        '–î–∞—Ç–∞', '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã', '–í–æ–∑—Ä–∞—Å—Ç', '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏', 
        '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤', '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤', '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
        '–ê–∫—É—à–µ—Ä–∫–∞', '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤', '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤', '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞', '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞',
        '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', '–ê–Ω–µ—Å—Ç–µ–∑–∏—è', '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤',
        '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è', '–ì–µ—Å—Ç–æ–∑', '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç', '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
        '–ê–Ω–µ–º–∏—è', '–ò–Ω—Ñ–µ–∫—Ü–∏–∏', '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã', '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ', '–ú–∞–ª–æ–≤–æ–¥–∏–µ'
    ])
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv('data/patients.csv', index=False)

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def filter_patients_data(df, search_term, date_from, date_to, selected_midwives, 
                        selected_delivery_methods, selected_genders, age_range, 
                        weight_range, blood_loss_range):
    filtered_df = df.copy()
    
    # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã
    if search_term:
        filtered_df = filtered_df[filtered_df['–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã'].str.contains(search_term, case=False, na=False)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if date_from and date_to:
        filtered_df = filtered_df[
            (filtered_df['–î–∞—Ç–∞ —Ä–æ–¥–æ–≤'] >= date_from.strftime("%Y-%m-%d")) &
            (filtered_df['–î–∞—Ç–∞ —Ä–æ–¥–æ–≤'] <= date_to.strftime("%Y-%m-%d"))
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—É—à–µ—Ä–∫–∞–º
    if selected_midwives:
        filtered_df = filtered_df[filtered_df['–ê–∫—É—à–µ—Ä–∫–∞'].isin(selected_midwives)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–æ—Å–æ–±—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if selected_delivery_methods:
        filtered_df = filtered_df[filtered_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'].isin(selected_delivery_methods)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É —Ä–µ–±–µ–Ω–∫–∞
    if selected_genders:
        filtered_df = filtered_df[filtered_df['–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞'].isin(selected_genders)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if age_range:
        filtered_df = filtered_df[
            (filtered_df['–í–æ–∑—Ä–∞—Å—Ç'] >= age_range[0]) &
            (filtered_df['–í–æ–∑—Ä–∞—Å—Ç'] <= age_range[1])
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Å—É —Ä–µ–±–µ–Ω–∫–∞
    if weight_range:
        filtered_df = filtered_df[
            (filtered_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'] >= weight_range[0]) &
            (filtered_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'] <= weight_range[1])
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä–µ
    if blood_loss_range:
        filtered_df = filtered_df[
            (filtered_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'] >= blood_loss_range[0]) &
            (filtered_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'] <= blood_loss_range[1])
        ]
    
    return filtered_df

# –ì–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
st.title("üë∂ UMAY - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–∫—É—à–µ—Ä–æ–∫")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
with st.sidebar:
    st.header("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        ["üîê –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–µ–Ω–∏—Ü—ã", "üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", "üìà –î–∞—à–±–æ—Ä–¥"]
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if st.session_state.current_user:
        st.markdown("---")
        st.success(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.current_user}")
        if st.button("üö™ –í—ã–π—Ç–∏", type="secondary"):
            st.session_state.current_user = None
            st.rerun()

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
if page == "üîê –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
    st.header("üîê –í—Ö–æ–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    
    tab1, tab2 = st.tabs(["üîê –í–æ–π—Ç–∏", "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"])
    
    with tab1:
        st.subheader("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        with st.form("login_form"):
            login = st.text_input("–õ–æ–≥–∏–Ω", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
            
            login_submitted = st.form_submit_button("–í–æ–π—Ç–∏", type="primary")
            
            if login_submitted:
                if login and password:
                    user_name = check_user_login(login, password)
                    if user_name:
                        st.session_state.current_user = user_name
                        st.success(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!")
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
                else:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
    
    with tab2:
        st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with st.form("registration_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                full_name = st.text_input("–§–ò–û", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
                position = st.selectbox(
                    "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                    ["–ê–∫—É—à–µ—Ä–∫–∞", "–°—Ç–∞—Ä—à–∞—è –∞–∫—É—à–µ—Ä–∫–∞", "–ó–∞–≤–µ–¥—É—é—â–∞—è –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º", "–í—Ä–∞—á-–∞–∫—É—à–µ—Ä-–≥–∏–Ω–µ–∫–æ–ª–æ–≥"]
                )
                user_login = st.text_input("–õ–æ–≥–∏–Ω", placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω")
            
            with col2:
                medical_institution = st.text_input("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ", placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å–Ω–∏—Ü—ã/–∫–ª–∏–Ω–∏–∫–∏")
                user_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            
            submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", type="primary")
            
            if submitted:
                if full_name and medical_institution and user_login and user_password:
                    if user_password == confirm_password:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ª–æ–≥–∏–Ω
                        users_df = load_users()
                        if not users_df.empty and user_login in users_df['–õ–æ–≥–∏–Ω'].values:
                            st.error("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
                        else:
                            user_data = {
                                '–§–ò–û': full_name,
                                '–õ–æ–≥–∏–Ω': user_login,
                                '–ü–∞—Ä–æ–ª—å': user_password,
                                '–î–æ–ª–∂–Ω–æ—Å—Ç—å': position,
                                '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ': medical_institution
                            }
                            save_user(user_data)
                            st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    else:
                        st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                else:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–µ–Ω–∏—Ü—ã
elif page == "üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–µ–Ω–∏—Ü—ã":
    st.header("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–µ–Ω–∏—Ü—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if st.session_state.current_user is None:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        st.stop()
    
    with st.form("patient_data_form"):
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            patient_name = st.text_input("–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã")
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=14, max_value=60, value=25)
        
        with col2:
            pregnancy_weeks = st.number_input("–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–µ–¥–µ–ª—å)", min_value=20, max_value=42, value=38)
            weight_before = st.number_input("–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤ (–∫–≥)", min_value=40.0, max_value=150.0, value=70.0, step=0.1)
        
        with col3:
            weight_after = st.number_input("–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤ (–∫–≥)", min_value=40.0, max_value=150.0, value=65.0, step=0.1)
        
        # –°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        st.subheader("üè• –°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:**")
            gestosis = st.checkbox("–ì–µ—Å—Ç–æ–∑")
            diabetes = st.checkbox("–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç")
            hypertension = st.checkbox("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è")
            anemia = st.checkbox("–ê–Ω–µ–º–∏—è")
        
        with col2:
            st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏:**")
            infections = st.checkbox("–ò–Ω—Ñ–µ–∫—Ü–∏–∏")
            placenta_pathology = st.checkbox("–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã")
            polyhydramnios = st.checkbox("–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ")
            oligohydramnios = st.checkbox("–ú–∞–ª–æ–≤–æ–¥–∏–µ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        other_diseases = st.text_area("–î—Ä—É–≥–∏–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", 
                                    placeholder="–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∞—Ö
        st.subheader("üë∂ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∞—Ö")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            birth_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–¥–æ–≤", value=datetime.now().date())
            birth_time = st.time_input("–í—Ä–µ–º—è —Ä–æ–¥–æ–≤", value=time(12, 0))
            child_gender = st.selectbox("–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞", ["–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞"])
        
        with col2:
            child_weight = st.number_input("–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞ (–≥)", min_value=500, max_value=6000, value=3500, step=50)
            delivery_method = st.selectbox(
                "–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                ["–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã", "–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ", "–í–∞–∫—É—É–º-—ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è", "–ê–∫—É—à–µ—Ä—Å–∫–∏–µ —â–∏–ø—Ü—ã"]
            )
        
        with col3:
            anesthesia = st.selectbox(
                "–ê–Ω–µ—Å—Ç–µ–∑–∏—è",
                ["–ù–µ—Ç", "–≠–ø–∏–¥—É—Ä–∞–ª—å–Ω–∞—è", "–°–ø–∏–Ω–∞–ª—å–Ω–∞—è", "–û–±—â–∞—è", "–ú–µ—Å—Ç–Ω–∞—è"]
            )
            blood_loss = st.number_input("–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è (–º–ª)", min_value=0, max_value=2000, value=300, step=50)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        col1, col2 = st.columns(2)
        
        with col1:
            labor_duration = st.number_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤ (—á–∞—Å–æ–≤)", min_value=0.5, max_value=24.0, value=8.0, step=0.5)
            complications = st.text_area("–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è –≤ —Ä–æ–¥–∞—Ö", placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–æ–¥–æ–≤, –µ—Å–ª–∏ –±—ã–ª–∏")
        
        with col2:
            notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏")
        
        submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")
        
        if submitted:
            if patient_name:
                patient_data = {
                    '–î–∞—Ç–∞': datetime.now().strftime("%Y-%m-%d %H:%M"),
                    '–§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã': patient_name,
                    '–í–æ–∑—Ä–∞—Å—Ç': age,
                    '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏': pregnancy_weeks,
                    '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤': weight_before,
                    '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤': weight_after,
                    '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è': complications,
                    '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': notes,
                    '–ê–∫—É—à–µ—Ä–∫–∞': st.session_state.current_user,
                    '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤': birth_date.strftime("%Y-%m-%d"),
                    '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤': birth_time.strftime("%H:%M"),
                    '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞': child_gender,
                    '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞': child_weight,
                    '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è': delivery_method,
                    '–ê–Ω–µ—Å—Ç–µ–∑–∏—è': anesthesia,
                    '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è': blood_loss,
                    '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤': labor_duration,
                    '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': other_diseases,
                    '–ì–µ—Å—Ç–æ–∑': "–î–∞" if gestosis else "–ù–µ—Ç",
                    '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç': "–î–∞" if diabetes else "–ù–µ—Ç",
                    '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': "–î–∞" if hypertension else "–ù–µ—Ç",
                    '–ê–Ω–µ–º–∏—è': "–î–∞" if anemia else "–ù–µ—Ç",
                    '–ò–Ω—Ñ–µ–∫—Ü–∏–∏': "–î–∞" if infections else "–ù–µ—Ç",
                    '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã': "–î–∞" if placenta_pathology else "–ù–µ—Ç",
                    '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ': "–î–∞" if polyhydramnios else "–ù–µ—Ç",
                    '–ú–∞–ª–æ–≤–æ–¥–∏–µ': "–î–∞" if oligohydramnios else "–ù–µ—Ç"
                }
                save_patient_data(patient_data)
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–µ–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã!")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
elif page == "üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è":
    st.header("üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    
    patients_df = load_patients_data()
    
    if patients_df.empty:
        st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
            search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û —Ä–æ–∂–µ–Ω–∏—Ü—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è...")
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
            st.write("üìÖ –ü–µ—Ä–∏–æ–¥ —Ä–æ–¥–æ–≤:")
            date_from = st.date_input("–û—Ç", value=datetime.now().date() - timedelta(days=30))
            date_to = st.date_input("–î–æ", value=datetime.now().date())
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—É—à–µ—Ä–∫–∞–º
            midwives = patients_df['–ê–∫—É—à–µ—Ä–∫–∞'].unique().tolist()
            selected_midwives = st.multiselect("üë©‚Äç‚öïÔ∏è –ê–∫—É—à–µ—Ä–∫–∏", midwives, default=midwives)
        
        with col2:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–æ—Å–æ–±—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            delivery_methods = patients_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'].unique().tolist()
            selected_delivery_methods = st.multiselect("üè• –°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", delivery_methods, default=delivery_methods)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É —Ä–µ–±–µ–Ω–∫–∞
            genders = patients_df['–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞'].unique().tolist()
            selected_genders = st.multiselect("üë∂ –ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞", genders, default=genders)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            age_range = st.slider("üë§ –í–æ–∑—Ä–∞—Å—Ç —Ä–æ–∂–µ–Ω–∏—Ü—ã", 
                                 min_value=int(patients_df['–í–æ–∑—Ä–∞—Å—Ç'].min()), 
                                 max_value=int(patients_df['–í–æ–∑—Ä–∞—Å—Ç'].max()),
                                 value=(int(patients_df['–í–æ–∑—Ä–∞—Å—Ç'].min()), int(patients_df['–í–æ–∑—Ä–∞—Å—Ç'].max())))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        col1, col2 = st.columns(2)
        
        with col1:
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Å—É —Ä–µ–±–µ–Ω–∫–∞
            weight_range = st.slider("‚öñÔ∏è –í–µ—Å —Ä–µ–±–µ–Ω–∫–∞ (–≥)", 
                                   min_value=int(patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].min()), 
                                   max_value=int(patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].max()),
                                   value=(int(patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].min()), int(patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].max())))
        
        with col2:
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä–µ
            blood_loss_range = st.slider("ü©∏ –ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è (–º–ª)", 
                                       min_value=int(patients_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'].min()), 
                                       max_value=int(patients_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'].max()),
                                       value=(int(patients_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'].min()), int(patients_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'].max())))
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_df = filter_patients_data(patients_df, search_term, date_from, date_to, 
                                         selected_midwives, selected_delivery_methods, 
                                         selected_genders, age_range, weight_range, blood_loss_range)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        st.subheader(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(filtered_df)} –∑–∞–ø–∏—Å–µ–π)")
        
        if not filtered_df.empty:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", type="secondary"):
                    csv = filtered_df.to_csv(index=False)
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name=f"umay_report_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv"
                    )
            
            with col2:
                if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", type="secondary"):
                    st.rerun()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            st.dataframe(filtered_df, use_container_width=True)
            
            # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if len(filtered_df) > 0:
                st.subheader("üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π", len(filtered_df))
                
                with col2:
                    avg_age = filtered_df['–í–æ–∑—Ä–∞—Å—Ç'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{avg_age:.1f} –ª–µ—Ç")
                
                with col3:
                    avg_weight = filtered_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —Ä–µ–±–µ–Ω–∫–∞", f"{avg_weight:.0f} –≥")
                
                with col4:
                    natural_births = len(filtered_df[filtered_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'] == '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã'])
                    st.metric("–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã", natural_births)
        else:
            st.warning("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
elif page == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤":
    st.header("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤")
    
    tab1, tab2 = st.tabs(["üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—É—à–µ—Ä–∫–∏", "üë∂ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–µ–Ω–∏—Ü"])
    
    with tab1:
        st.subheader("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—É—à–µ—Ä–∫–∏")
        registrations_df = load_registrations()
        if not registrations_df.empty:
            st.dataframe(registrations_df, use_container_width=True)
        else:
            st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—É—à–µ—Ä–æ–∫")
    
    with tab2:
        st.subheader("üë∂ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–µ–Ω–∏—Ü")
        patients_df = load_patients_data()
        if not patients_df.empty:
            st.dataframe(patients_df, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ —Ä–æ–∂–µ–Ω–∏—Ü", len(patients_df))
            
            with col2:
                avg_age = patients_df['–í–æ–∑—Ä–∞—Å—Ç'].mean()
                st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{avg_age:.1f} –ª–µ—Ç")
            
            with col3:
                avg_weight_loss = (patients_df['–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤'] - patients_df['–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤']).mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è –ø–æ—Ç–µ—Ä—è –≤–µ—Å–∞", f"{avg_weight_loss:.1f} –∫–≥")
            
            with col4:
                avg_child_weight = patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].mean()
                st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —Ä–µ–±–µ–Ω–∫–∞", f"{avg_child_weight:.0f} –≥")
        else:
            st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∂–µ–Ω–∏—Ü–∞—Ö")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
elif page == "üìà –î–∞—à–±–æ—Ä–¥":
    st.header("üìà –î–∞—à–±–æ—Ä–¥")
    
    patients_df = load_patients_data()
    
    if not patients_df.empty:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ä–æ–¥–æ–≤", len(patients_df))
        
        with col2:
            natural_births = len(patients_df[patients_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'] == '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã'])
            st.metric("–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã", natural_births)
        
        with col3:
            c_sections = len(patients_df[patients_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'] == '–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ'])
            st.metric("–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ", c_sections)
        
        with col4:
            boys = len(patients_df[patients_df['–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞'] == '–ú–∞–ª—å—á–∏–∫'])
            girls = len(patients_df[patients_df['–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞'] == '–î–µ–≤–æ—á–∫–∞'])
            st.metric("–ú–∞–ª—å—á–∏–∫–∏/–î–µ–≤–æ—á–∫–∏", f"{boys}/{girls}")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            delivery_counts = patients_df['–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'].value_counts()
            st.bar_chart(delivery_counts)
        
        with col2:
            st.subheader("–ü–æ–ª –¥–µ—Ç–µ–π")
            gender_counts = patients_df['–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞'].value_counts()
            st.pie_chart(gender_counts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
        st.subheader("üè• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:**")
            if '–ì–µ—Å—Ç–æ–∑' in patients_df.columns:
                gestosis_count = len(patients_df[patients_df['–ì–µ—Å—Ç–æ–∑'] == '–î–∞'])
                st.write(f"‚Ä¢ –ì–µ—Å—Ç–æ–∑: {gestosis_count}")
            
            if '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç' in patients_df.columns:
                diabetes_count = len(patients_df[patients_df['–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç'] == '–î–∞'])
                st.write(f"‚Ä¢ –°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç: {diabetes_count}")
            
            if '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è' in patients_df.columns:
                hypertension_count = len(patients_df[patients_df['–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è'] == '–î–∞'])
                st.write(f"‚Ä¢ –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è: {hypertension_count}")
            
            if '–ê–Ω–µ–º–∏—è' in patients_df.columns:
                anemia_count = len(patients_df[patients_df['–ê–Ω–µ–º–∏—è'] == '–î–∞'])
                st.write(f"‚Ä¢ –ê–Ω–µ–º–∏—è: {anemia_count}")
        
        with col2:
            st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏:**")
            if '–ò–Ω—Ñ–µ–∫—Ü–∏–∏' in patients_df.columns:
                infections_count = len(patients_df[patients_df['–ò–Ω—Ñ–µ–∫—Ü–∏–∏'] == '–î–∞'])
                st.write(f"‚Ä¢ –ò–Ω—Ñ–µ–∫—Ü–∏–∏: {infections_count}")
            
            if '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã' in patients_df.columns:
                placenta_count = len(patients_df[patients_df['–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã'] == '–î–∞'])
                st.write(f"‚Ä¢ –ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–ª–∞—Ü–µ–Ω—Ç—ã: {placenta_count}")
            
            if '–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ' in patients_df.columns:
                poly_count = len(patients_df[patients_df['–ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ'] == '–î–∞'])
                st.write(f"‚Ä¢ –ú–Ω–æ–≥–æ–≤–æ–¥–∏–µ: {poly_count}")
            
            if '–ú–∞–ª–æ–≤–æ–¥–∏–µ' in patients_df.columns:
                oligo_count = len(patients_df[patients_df['–ú–∞–ª–æ–≤–æ–¥–∏–µ'] == '–î–∞'])
                st.write(f"‚Ä¢ –ú–∞–ª–æ–≤–æ–¥–∏–µ: {oligo_count}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {patients_df['–í–æ–∑—Ä–∞—Å—Ç'].mean():.1f} –ª–µ—Ç")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏: {patients_df['–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏'].mean():.1f} –Ω–µ–¥–µ–ª—å")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —Ä–µ–±–µ–Ω–∫–∞: {patients_df['–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞'].mean():.0f} –≥")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∫—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è: {patients_df['–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è'].mean():.0f} –º–ª")
        
        with col2:
            st.write("**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤:**")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {patients_df['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤'].mean():.1f} —á–∞—Å–æ–≤")
            st.write(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {patients_df['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤'].min():.1f} —á–∞—Å–æ–≤")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {patients_df['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤'].max():.1f} —á–∞—Å–æ–≤")
            
            st.write("**–ê–Ω–µ—Å—Ç–µ–∑–∏—è:**")
            anesthesia_counts = patients_df['–ê–Ω–µ—Å—Ç–µ–∑–∏—è'].value_counts()
            for anesthesia, count in anesthesia_counts.items():
                st.write(f"‚Ä¢ {anesthesia}: {count}")
    else:
        st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
if st.session_state.current_user:
    st.sidebar.success(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.current_user}")
