// VoiceWizard Web Component: step-by-step voice questionnaire
// Uses Web Speech API for recognition (ru-KZ with ru-RU fallback) and SpeechSynthesis for TTS prompts.
(function() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    function speak(text, lang) {
        try {
            if (!('speechSynthesis' in window)) return Promise.resolve();
            return new Promise((resolve) => {
                const utter = new SpeechSynthesisUtterance(text);
                utter.lang = lang || 'ru-RU';
                utter.rate = 1;
                utter.onend = resolve;
                // Stop any ongoing speech first
                window.speechSynthesis.cancel();
                window.speechSynthesis.speak(utter);
            });
        } catch (_) {
            return Promise.resolve();
        }
    }

    function nowHHMM() {
        const d = new Date();
        const hh = String(d.getHours()).padStart(2, '0');
        const mm = String(d.getMinutes()).padStart(2, '0');
        return `${hh}:${mm}`;
    }

    function todayYMD() {
        const d = new Date();
        const yyyy = d.getFullYear();
        const mm = String(d.getMonth() + 1).padStart(2, '0');
        const dd = String(d.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }

    function normalize(text) {
        return (text || '').toString().trim().toLowerCase();
    }

    function isNegativeOrSkip(text) {
        const t = normalize(text);
        return /(–Ω–µ—Ç|–Ω–µ –Ω–∞–¥–æ|–ø—Ä–æ–ø—É—Å—Ç–∏|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å|–¥–∞–ª–µ–µ|skip|no)/i.test(t);
    }

    function parseNumber(text) {
        const t = normalize(text).replace(/,/, '.');
        const m = t.match(/\d+[\.,]?\d*/);
        if (!m) return null;
        const num = parseFloat(m[0].replace(',', '.'));
        return isNaN(num) ? null : num;
    }

    function parseInteger(text) {
        const m = normalize(text).match(/\d{1,4}/);
        if (!m) return null;
        const n = parseInt(m[0], 10);
        return isNaN(n) ? null : n;
    }

    function parseBP(text) {
        const t = normalize(text);
        const m = t.match(/(\d{2,3})\s*(?:–Ω–∞|\/|\\|\-|‚Äî|:)\s*(\d{2,3})/);
        if (!m) return null;
        const sys = parseInt(m[1], 10), dia = parseInt(m[2], 10);
        if (isNaN(sys) || isNaN(dia)) return null;
        return { sys, dia };
    }

    function parseDate(text) {
        const t = normalize(text);
        if (/—Å–µ–≥–æ–¥–Ω—è/.test(t)) return todayYMD();
        if (/–≤—á–µ—Ä–∞/.test(t)) {
            const d = new Date();
            d.setDate(d.getDate() - 1);
            const yyyy = d.getFullYear();
            const mm = String(d.getMonth() + 1).padStart(2, '0');
            const dd = String(d.getDate()).padStart(2, '0');
            return `${yyyy}-${mm}-${dd}`;
        }
        // dd.mm.yyyy or dd.mm
        const m1 = t.match(/\b(\d{1,2})[\.\-/](\d{1,2})(?:[\.\-/](\d{2,4}))?\b/);
        if (m1) {
            const dd = String(parseInt(m1[1], 10)).padStart(2, '0');
            const mm = String(parseInt(m1[2], 10)).padStart(2, '0');
            let yyyy = m1[3] ? parseInt(m1[3], 10) : (new Date()).getFullYear();
            if (yyyy < 100) yyyy = 2000 + yyyy; // 24 -> 2024
            return `${yyyy}-${mm}-${dd}`;
        }
        return null;
    }

    function parseTime(text) {
        const t = normalize(text);
        if (/—Å–µ–π—á–∞—Å|—Ç–µ–∫—É—â–µ–µ/.test(t)) return nowHHMM();
        const m = t.match(/\b(\d{1,2})[\.:\-\s](\d{1,2})\b/);
        if (m) {
            const hh = String(parseInt(m[1], 10)).padStart(2, '0');
            const mm = String(parseInt(m[2], 10)).padStart(2, '0');
            return `${hh}:${mm}`;
        }
        return null;
    }

    function setFieldValue(form, selector, value) {
        if (!form || !selector) return false;
        const el = form.querySelector(selector);
        if (!el) return false;
        if (el.tagName === 'SELECT') {
            // try direct match, else by option text
            let matched = false;
            for (const opt of el.options) {
                if (normalize(opt.value) === normalize(value) || normalize(opt.text) === normalize(value)) {
                    el.value = opt.value;
                    matched = true;
                    break;
                }
            }
            if (!matched) el.value = value;
        } else {
            el.value = value;
        }
        el.dispatchEvent(new Event('input', { bubbles: true }));
        el.dispatchEvent(new Event('change', { bubbles: true }));
        try {
            el.classList.add('ring-2');
            setTimeout(() => el.classList.remove('ring-2'), 1200);
        } catch (_) {}
        return true;
    }

    function checkBox(form, selector, checked) {
        const el = form.querySelector(selector);
        if (!el) return false;
        el.checked = !!checked;
        el.dispatchEvent(new Event('change', { bubbles: true }));
        return true;
    }

    const DISEASE_KEYWORDS = {
        gestosis: [/–≥–µ—Å—Ç–æ–∑/i],
        diabetes: [/–¥–∏–∞–±–µ—Ç/i, /—Å–∞—Ö–∞—Ä/i],
        hypertension: [/–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏/i, /–¥–∞–≤–ª–µ–Ω/i],
        anemia: [/–∞–Ω–µ–º–∏/i],
        infections: [/–∏–Ω—Ñ–µ–∫—Ü/i, /–≤–∏—Ä—É—Å/i],
        placenta_pathology: [/–ø–∞—Ç–æ–ª–æ–≥(–∏—è|–∏–∏)\s+–ø–ª–∞—Ü–µ–Ω—Ç/i, /–ø–ª–∞—Ü–µ–Ω—Ç[–∞—ã]/i],
        polyhydramnios: [/–º–Ω–æ–≥–æ–≤–æ–¥/i],
        oligohydramnios: [/–º–∞–ª–æ–≤–æ–¥/i],
        pls: [/–ø–ª—Å/i],
        pts: [/–ø—Ç—Å/i],
        eclampsia: [/—ç–∫–ª–∞–º–ø—Å–∏/i]
    };

    const BIRTH_COMPLICATIONS_KEYWORDS = {
        gestational_hypertension: [/–≥–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω(–∞—è|–æ–π)\s+–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑/i],
        placenta_previa: [/–ø–ª–æ—Ç–Ω(–æ–µ|–æ–≥–æ)\s+–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω/i],
        shoulder_dystocia: [/–¥–∏—Å—Ç–æ—Ü/i, /–ø–ª–µ—á–∏–∫/i],
        third_degree_tear: [/—Ä–∞–∑—Ä—ã–≤\s*3/i, /—Ç—Ä–µ—Ç—å(–µ–π|—è)\s+—Å—Ç–µ–ø–µ–Ω/i],
        cord_prolapse: [/–≤—ã–ø–∞–¥–µ–Ω(–∏–µ|–∏—è)\s+–ø—É–ø–æ–≤–∏–Ω/i],
        postpartum_hemorrhage: [/–ø—Ä–∫/i, /–∫—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä/i],
        placental_abruption: [/–ø–æ–Ω—Ä–ø/i, /–æ—Ç—Å–ª–æ–π–∫[–∞–∏]\s+–ø–ª–∞—Ü–µ–Ω—Ç/i]
    };

    class VoiceWizard extends HTMLElement {
        constructor() {
            super();
            this.attachShadow({ mode: 'open' });
            this.recognition = null;
            this.isListening = false;
            this.stopRequested = false;
            this.langPrimary = this.getAttribute('data-lang-primary') || 'ru-KZ';
            this.langFallback = this.getAttribute('data-lang-fallback') || 'ru-RU';
            this.form = null;
            this.stepIndex = 0;
            this.steps = [];
        }

        connectedCallback() {
            this.form = this.closest('form') || document.querySelector(this.getAttribute('data-form-selector') || 'form');
            this.render();

            if (!SpeechRecognition) {
                this.showUnsupported();
                return;
            }
            try {
                this.recognition = new SpeechRecognition();
                this.recognition.lang = this.langPrimary;
                this.recognition.interimResults = true;
                this.recognition.continuous = false;
                this.recognition.onresult = (e) => this.onResult(e);
                this.recognition.onend = () => this.onEnd();
                this.recognition.onerror = (e) => this.onError(e);
            } catch (_) {
                this.showUnsupported();
                return;
            }

            this.buildSteps();
            this.updateUI();
            this.bindEvents();
        }

        render() {
            const style = `
                :host { display: block; margin-top: 8px; }
                .box { background: rgba(255,255,255,0.8); border: 1px solid #e5e7eb; border-radius: 16px; padding: 12px; }
                .row { display: flex; align-items: center; gap: 8px; flex-wrap: wrap; }
                .btn { cursor: pointer; border: 0; border-radius: 12px; padding: 10px 14px; font-weight: 700; color: white; background: linear-gradient(90deg,#10b981,#3b82f6); display: inline-flex; align-items: center; gap: 8px; }
                .btn[disabled] { opacity: .6; cursor: not-allowed; }
                .btn-stop { background: linear-gradient(90deg,#f59e0b,#ef4444); }
                .btn-secondary { cursor: pointer; border: 1px solid #d1d5db; background: white; color: #374151; padding: 8px 12px; border-radius: 10px; font-weight: 600; }
                .status { font-size: .95rem; color: #374151; }
                .q { margin-top: 8px; font-weight: 700; color: #111827; }
                .tx { margin-top: 6px; width: 100%; min-height: 64px; resize: vertical; border: 1px solid #e5e7eb; border-radius: 12px; padding: 8px; background: #f9fafb; }
                .prog { margin-top: 6px; color: #6b7280; font-size: .9rem; }
            `;
            const html = `
                <div class="box">
                    <div class="row">
                        <button type="button" class="btn" id="startBtn">üéß –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞</button>
                        <button type="button" class="btn btn-stop" id="stopBtn" hidden>‚èπÔ∏è –°—Ç–æ–ø</button>
                        <button type="button" class="btn-secondary" id="skipBtn" hidden>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                        <span class="status" id="status">–ì–æ—Ç–æ–≤</span>
                    </div>
                    <div class="q" id="question"></div>
                    <textarea class="tx" id="answer" placeholder="–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å" readonly></textarea>
                    <div class="prog" id="progress"></div>
                </div>
            `;
            this.shadowRoot.innerHTML = `<style>${style}</style>${html}`;
            this.$ = (id) => this.shadowRoot.getElementById(id);
        }

        showUnsupported() {
            this.shadowRoot.innerHTML = `
                <div class="box"><div class="status">–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥</div></div>
            `;
        }

        bindEvents() {
            this.$('startBtn').addEventListener('click', () => this.startWizard());
            this.$('stopBtn').addEventListener('click', () => this.stopWizard());
            this.$('skipBtn').addEventListener('click', () => this.nextStep(true));
        }

        buildSteps() {
            const sel = (name) => this.getAttribute(`data-${name}-selector`) || `input[name="${name}"]`;
            const sels = {
                patient_name: sel('patient_name'),
                age: sel('age'),
                pregnancy_weeks: sel('pregnancy_weeks'),
                weight_before: sel('weight_before'),
                weight_after: sel('weight_after'),
                sys: this.getAttribute('data-sys-selector') || 'input[name="blood_pressure_sys"]',
                dia: this.getAttribute('data-dia-selector') || 'input[name="blood_pressure_dia"]',
                complications: this.getAttribute('data-complications-selector') || 'textarea[name="complications"]',
                notes: this.getAttribute('data-notes-selector') || 'textarea[name="notes"]',
                birth_date: sel('birth_date'),
                birth_time: sel('birth_time'),
                child_gender: 'select[name="child_gender"]',
                child_weight: sel('child_weight'),
                delivery_method: 'select[name="delivery_method"]',
                anesthesia: 'select[name="anesthesia"]',
                blood_loss: sel('blood_loss'),
                labor_duration: sel('labor_duration')
            };

            this.steps = [
                { key: 'patient_name', question: '–ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∫–∏', selector: sels.patient_name, type: 'text' },
                { key: 'age', question: '–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∫–∏ –≤ –≥–æ–¥–∞—Ö?', selector: sels.age, type: 'int' },
                { key: 'pregnancy_weeks', question: '–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—è—Ö?', selector: sels.pregnancy_weeks, type: 'int' },
                { key: 'weight_before', question: '–í–µ—Å –¥–æ —Ä–æ–¥–æ–≤ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?', selector: sels.weight_before, type: 'number' },
                { key: 'weight_after', question: '–í–µ—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?', selector: sels.weight_after, type: 'number' },
                { key: 'bp', question: '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: 120 –Ω–∞ 80', selector: [sels.sys, sels.dia], type: 'bp' },
                { key: 'complications', question: '–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è –≤ —Ä–æ–¥–∞—Ö? –ï—Å–ª–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏—Ç–µ: –Ω–µ—Ç', selector: sels.complications, type: 'text' },
                { key: 'notes', question: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∫–µ? –ï—Å–ª–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏—Ç–µ: –Ω–µ—Ç', selector: sels.notes, type: 'text' },
                { key: 'birth_date', question: '–î–∞—Ç–∞ —Ä–æ–¥–æ–≤? –ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024 –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è', selector: sels.birth_date, type: 'date' },
                { key: 'birth_time', question: '–í—Ä–µ–º—è —Ä–æ–¥–æ–≤? –ù–∞–ø—Ä–∏–º–µ—Ä: 14 30 –∏–ª–∏ 14:30', selector: sels.birth_time, type: 'time' },
                { key: 'child_gender', question: '–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞? –ú–∞–ª—å—á–∏–∫ –∏–ª–∏ –î–µ–≤–æ—á–∫–∞', selector: sels.child_gender, type: 'select', options: { '–º–∞–ª—å—á–∏–∫': '–ú–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞': '–î–µ–≤–æ—á–∫–∞' } },
                { key: 'child_weight', question: '–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞ –≤ –≥—Ä–∞–º–º–∞—Ö?', selector: sels.child_weight, type: 'int' },
                { key: 'delivery_method', question: '–°–ø–æ—Å–æ–± —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è? –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –ö–µ—Å–∞—Ä–µ–≤–æ, –í–∞–∫—É—É–º, –©–∏–ø—Ü—ã', selector: sels.delivery_method, type: 'select', options: { '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã', '–∫–µ—Å–∞—Ä–µ–≤–æ': '–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ', '–≤–∞–∫—É—É–º': '–í–∞–∫—É—É–º-—ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è', '—â–∏–ø—Ü—ã': '–ê–∫—É—à–µ—Ä—Å–∫–∏–µ —â–∏–ø—Ü—ã' } },
                { key: 'anesthesia', question: '–ê–Ω–µ—Å—Ç–µ–∑–∏—è? –ù–µ—Ç, –≠–ø–∏–¥—É—Ä–∞–ª—å–Ω–∞—è, –°–ø–∏–Ω–∞–ª—å–Ω–∞—è, –û–±—â–∞—è, –ú–µ—Å—Ç–Ω–∞—è', selector: sels.anesthesia, type: 'select', options: { '–Ω–µ—Ç': '–ù–µ—Ç', '–±–µ–∑': '–ù–µ—Ç', '—ç–ø–∏–¥—É—Ä–∞–ª—å': '–≠–ø–∏–¥—É—Ä–∞–ª—å–Ω–∞—è', '—Å–ø–∏–Ω–∞–ª': '–°–ø–∏–Ω–∞–ª—å–Ω–∞—è', '–æ–±—â–∞—è': '–û–±—â–∞—è', '–º–µ—Å—Ç–Ω–∞—è': '–ú–µ—Å—Ç–Ω–∞—è' } },
                { key: 'blood_loss', question: '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä—è –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö?', selector: sels.blood_loss, type: 'int' },
                { key: 'labor_duration', question: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–¥–æ–≤ –≤ —á–∞—Å–∞—Ö?', selector: sels.labor_duration, type: 'number' },
                { key: 'diseases', question: '–ï—Å—Ç—å –ª–∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ. –°–∫–∞–∂–∏—Ç–µ: –Ω–µ—Ç ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç', selector: null, type: 'checkboxes-disease' },
                { key: 'birth_complications', question: '–ë—ã–ª–∏ –ª–∏ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è –≤ —Ä–æ–¥–∞—Ö? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ. –°–∫–∞–∂–∏—Ç–µ: –Ω–µ—Ç ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç', selector: null, type: 'checkboxes-birth' }
            ];
        }

        updateUI() {
            const total = this.steps.length;
            const idx = Math.min(this.stepIndex, total - 1);
            const step = this.steps[idx];
            this.$('question').textContent = step ? step.question : '–ì–æ—Ç–æ–≤–æ';
            this.$('progress').textContent = step ? `–®–∞–≥ ${idx + 1} –∏–∑ ${total}` : `–ì–æ—Ç–æ–≤–æ (${total} —à–∞–≥–æ–≤)`;
        }

        async startWizard() {
            this.stopRequested = false;
            this.stepIndex = 0;
            this.$('startBtn').hidden = true;
            this.$('stopBtn').hidden = false;
            this.$('skipBtn').hidden = false;
            this.$('status').textContent = '–ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞';
            await this.askCurrent();
        }

        stopWizard() {
            this.stopRequested = true;
            try { if (this.recognition && this.isListening) this.recognition.stop(); } catch(_) {}
            this.$('startBtn').hidden = false;
            this.$('stopBtn').hidden = true;
            this.$('skipBtn').hidden = true;
            this.$('status').textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
        }

        async askCurrent() {
            if (this.stopRequested) return;
            const step = this.steps[this.stepIndex];
            if (!step) {
                this.$('status').textContent = '–í–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω';
                this.$('question').textContent = '–ì–æ—Ç–æ–≤–æ';
                return;
            }
            this.updateUI();
            await speak(step.question, this.langFallback);
            this.startListening();
        }

        startListening() {
            if (!this.recognition) return;
            try {
                this.isListening = true;
                this.$('status').textContent = '–°–ª—É—à–∞—é...';
                this.$('answer').value = '';
                this.recognition.lang = this.langPrimary;
                this.recognition.start();
            } catch (_) {}
        }

        onResult(event) {
            let finalText = '';
            let interim = '';
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const res = event.results[i];
                if (res.isFinal) finalText += res[0].transcript + ' ';
                else interim += res[0].transcript + ' ';
            }
            const combined = (finalText + interim).trim();
            this.$('answer').value = combined;
        }

        onEnd() {
            this.isListening = false;
            const text = this.$('answer').value.trim();
            if (!text && this.recognition && this.recognition.lang !== this.langFallback) {
                try { this.recognition.lang = this.langFallback; this.recognition.start(); return; } catch (_) {}
            }
            // Process the captured text
            this.applyAnswer(text);
        }

        onError(e) {
            this.isListening = false;
            this.$('status').textContent = '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è';
            // Proceed to next to avoid stuck
            this.nextStep(true);
        }

        applyAnswer(text) {
            const step = this.steps[this.stepIndex];
            if (!step) return;
            const neg = isNegativeOrSkip(text);
            let applied = false;
            if (!neg) {
                switch (step.type) {
                    case 'text':
                        applied = setFieldValue(this.form, step.selector, text);
                        break;
                    case 'int': {
                        const n = parseInteger(text);
                        if (n !== null) applied = setFieldValue(this.form, step.selector, String(n));
                        break;
                    }
                    case 'number': {
                        const n = parseNumber(text);
                        if (n !== null) applied = setFieldValue(this.form, step.selector, String(n));
                        break;
                    }
                    case 'bp': {
                        const bp = parseBP(text);
                        if (bp) {
                            const [selSys, selDia] = step.selector;
                            setFieldValue(this.form, selSys, String(bp.sys));
                            setFieldValue(this.form, selDia, String(bp.dia));
                            applied = true;
                        }
                        break;
                    }
                    case 'date': {
                        const d = parseDate(text);
                        if (d) applied = setFieldValue(this.form, step.selector, d);
                        break;
                    }
                    case 'time': {
                        const t = parseTime(text);
                        if (t) applied = setFieldValue(this.form, step.selector, t);
                        break;
                    }
                    case 'select': {
                        const t = normalize(text);
                        let value = null;
                        for (const key in step.options || {}) {
                            if (t.includes(key)) { value = step.options[key]; break; }
                        }
                        if (!value) value = text;
                        applied = setFieldValue(this.form, step.selector, value);
                        break;
                    }
                    case 'checkboxes-disease': {
                        const t = text.toLowerCase();
                        let any = false;
                        for (const name in DISEASE_KEYWORDS) {
                            const patterns = DISEASE_KEYWORDS[name];
                            if (patterns.some(rx => rx.test(t))) {
                                any = checkBox(this.form, `input[name="${name}"]`, true) || any;
                            }
                        }
                        applied = any;
                        break;
                    }
                    case 'checkboxes-birth': {
                        const t = text.toLowerCase();
                        let any = false;
                        for (const name in BIRTH_COMPLICATIONS_KEYWORDS) {
                            const patterns = BIRTH_COMPLICATIONS_KEYWORDS[name];
                            if (patterns.some(rx => rx.test(t))) {
                                any = checkBox(this.form, `input[name="${name}"]`, true) || any;
                            }
                        }
                        applied = any;
                        break;
                    }
                }
            }
            this.$('status').textContent = applied ? '–ó–∞–ø–∏—Å–∞–Ω–æ' : '–ü—Ä–æ–ø—É—â–µ–Ω–æ';
            this.nextStep(false);
        }

        async nextStep(skippedByUser) {
            if (this.stopRequested) return;
            this.stepIndex += 1;
            if (this.stepIndex >= this.steps.length) {
                await speak('–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω', this.langFallback);
                this.stopWizard();
                return;
            }
            await this.askCurrent();
        }
    }

    if (!customElements.get('voice-wizard')) {
        customElements.define('voice-wizard', VoiceWizard);
    }
})();


