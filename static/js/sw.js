// UMAY Service Worker - PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
const CACHE_NAME = 'umay-v1.0.0';
const STATIC_CACHE = 'umay-static-v1.0.0';
const DYNAMIC_CACHE = 'umay-dynamic-v1.0.0';

// –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const STATIC_FILES = [
  '/',
  '/static/css/style.css',
  '/static/css/mobile.css',
  '/static/js/main.js',
  '/static/js/mobile.js',
  '/static/assets/new-logo.png',
  '/static/assets/umay-pattern.svg',
  '/templates/base.html',
  '/templates/index.html',
  '/templates/login.html',
  '/templates/register.html',
  '/templates/dashboard.html'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üîÑ UMAY Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('‚úÖ UMAY Service Worker: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        return cache.addAll(STATIC_FILES);
      })
      .catch((error) => {
        console.error('‚ùå UMAY Service Worker: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      })
  );
  
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('üöÄ UMAY Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('üóëÔ∏è UMAY Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('‚úÖ UMAY Service Worker: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        return self.clients.claim();
      })
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') {
    return;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  if (url.origin !== location.origin) {
    return;
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: Cache First –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏, Network First –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
  if (isStaticFile(request.url)) {
    event.respondWith(cacheFirst(request));
  } else {
    event.respondWith(networkFirst(request));
  }
});

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
async function cacheFirst(request) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.error('‚ùå UMAY Service Worker: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
    return new Response('Offline - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', {
      status: 503,
      statusText: 'Service Unavailable',
      headers: { 'Content-Type': 'text/plain' }
    });
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
async function networkFirst(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('üì± UMAY Service Worker: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è:', request.url);
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Fallback –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
    if (request.headers.get('accept').includes('text/html')) {
      return caches.match('/templates/error.html');
    }
    
    return new Response('Offline - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', {
      status: 503,
      statusText: 'Service Unavailable',
      headers: { 'Content-Type': 'text/plain' }
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º
function isStaticFile(url) {
  const staticExtensions = ['.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf'];
  return staticExtensions.some(ext => url.includes(ext));
}

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('push', (event) => {
  console.log('üì± UMAY Service Worker: –ü–æ–ª—É—á–µ–Ω–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
  
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body || 'UMAY - –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: '/static/assets/new-logo.png',
      badge: '/static/assets/new-logo.png',
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: 1
      },
      actions: [
        {
          action: 'explore',
          title: '–û—Ç–∫—Ä—ã—Ç—å',
          icon: '/static/assets/new-logo.png'
        },
        {
          action: 'close',
          title: '–ó–∞–∫—Ä—ã—Ç—å',
          icon: '/static/assets/new-logo.png'
        }
      ]
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'UMAY', options)
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('üëÜ UMAY Service Worker: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
  
  event.notification.close();
  
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
self.addEventListener('error', (event) => {
  console.error('‚ùå UMAY Service Worker: –û—à–∏–±–∫–∞:', event.error);
});

self.addEventListener('unhandledrejection', (event) => {
  console.error('‚ùå UMAY Service Worker: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', event.reason);
});

console.log('üöÄ UMAY Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
