// UMAY Mobile PWA JavaScript
class UMAYPWA {
  constructor() {
    this.isInstalled = false;
    this.deferredPrompt = null;
    this.isOnline = navigator.onLine;
    
    this.init();
  }
  
  async init() {
    console.log('üöÄ UMAY PWA: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
    await this.registerServiceWorker();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    await this.initPWA();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è iOS/Android
    this.setupInstallCTA();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    this.checkInstallation();
    
    console.log('‚úÖ UMAY PWA: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
  async registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SW –Ω–∞ –∫–æ—Ä–Ω–µ, —á—Ç–æ–±—ã –æ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const registration = await navigator.serviceWorker.register('/sw.js');
        console.log('‚úÖ UMAY PWA: Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              this.showUpdateNotification();
            }
          });
        });
        
      } catch (error) {
        console.error('‚ùå UMAY PWA: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è UMAY PWA: Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
  async initPWA() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ PWA
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      console.warn('‚ö†Ô∏è UMAY PWA: PWA –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
      this.requestNotificationPermission();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ online/offline —Å—Ç–∞—Ç—É—Å–∞
    this.updateOnlineStatus();
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
  setupEventListeners() {
    // –°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
    window.addEventListener('beforeinstallprompt', (e) => {
      console.log('üì± UMAY PWA: –î–æ—Å—Ç—É–ø–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞');
      e.preventDefault();
      this.deferredPrompt = e;
      this.showInstallPrompt();
    });
    
    // –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    window.addEventListener('appinstalled', () => {
      console.log('‚úÖ UMAY PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.isInstalled = true;
      this.hideInstallPrompt();
      this.showSuccessMessage('UMAY —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω!');
    });
    
    // Online/offline —Å–æ–±—ã—Ç–∏—è
    window.addEventListener('online', () => {
      this.isOnline = true;
      this.updateOnlineStatus();
      this.showSuccessMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    window.addEventListener('offline', () => {
      this.isOnline = false;
      this.updateOnlineStatus();
      this.showWarningMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –†–∞–±–æ—Ç–∞–µ–º –≤ offline —Ä–µ–∂–∏–º–µ');
    });
    
    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
    this.setupTouchGestures();
    
    // Swipe —Å–æ–±—ã—Ç–∏—è
    this.setupSwipeGestures();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  setupInstallCTA() {
    const baseInstallBtn = document.getElementById('install-pwa-btn');
    const pageInstallBtn = document.getElementById('mobile-install-btn');

    const isInStandalone = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isChromeIOS = /CriOS/.test(navigator.userAgent);

    // –ï—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if (isInStandalone) {
      if (baseInstallBtn) baseInstallBtn.classList.add('hidden');
      return;
    }

    // Android: –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ beforeinstallprompt (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ showInstallPrompt)
    // iOS: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –ø–æ –∫–ª–∏–∫—É –¥–∞—ë–º –Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (isIOS) {
      if (baseInstallBtn) {
        baseInstallBtn.classList.remove('hidden');
        baseInstallBtn.addEventListener('click', () => this.showiOSInstallHelp(isChromeIOS));
      }
      if (pageInstallBtn) {
        pageInstallBtn.addEventListener('click', () => this.showiOSInstallHelp(isChromeIOS));
      }
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ touch –∂–µ—Å—Ç–æ–≤
  setupTouchGestures() {
    let startX = 0;
    let startY = 0;
    let startTime = 0;
    
    document.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      startY = e.touches[0].clientY;
      startTime = Date.now();
    });
    
    document.addEventListener('touchend', (e) => {
      const endX = e.changedTouches[0].clientX;
      const endY = e.changedTouches[0].clientY;
      const endTime = Date.now();
      
      const deltaX = endX - startX;
      const deltaY = endY - startY;
      const deltaTime = endTime - startTime;
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∂–µ—Å—Ç–∞
      if (deltaTime < 300 && Math.abs(deltaX) > 50 && Math.abs(deltaY) < 100) {
        if (deltaX > 0) {
          this.handleSwipeRight();
        } else {
          this.handleSwipeLeft();
        }
      }
      
      // Tap gesture
      if (deltaTime < 200 && Math.abs(deltaX) < 10 && Math.abs(deltaY) < 10) {
        this.handleTap();
      }
    });
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ swipe –∂–µ—Å—Ç–æ–≤
  setupSwipeGestures() {
    let startX = 0;
    let startY = 0;
    
    document.addEventListener('mousedown', (e) => {
      startX = e.clientX;
      startY = e.clientY;
    });
    
    document.addEventListener('mouseup', (e) => {
      const deltaX = e.clientX - startX;
      const deltaY = e.clientY - startY;
      
      if (Math.abs(deltaX) > 50 && Math.abs(deltaY) < 100) {
        if (deltaX > 0) {
          this.handleSwipeRight();
        } else {
          this.handleSwipeLeft();
        }
      }
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤
  handleSwipeRight() {
    console.log('üëâ UMAY PWA: Swipe –≤–ø—Ä–∞–≤–æ');
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    if (window.history.length > 1) {
      window.history.back();
    }
  }
  
  handleSwipeLeft() {
    console.log('üëà UMAY PWA: Swipe –≤–ª–µ–≤–æ');
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥
    if (window.history.length > 1) {
      window.history.forward();
    }
  }
  
  handleTap() {
    console.log('üëÜ UMAY PWA: Tap gesture');
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å prompt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  showInstallPrompt() {
    if (this.deferredPrompt) {
      const installButton = document.getElementById('install-pwa-btn');
      if (installButton) {
        installButton.classList.remove('hidden');
        installButton.addEventListener('click', () => {
          this.installPWA();
        });
      }
    }
  }
  
  // –°–∫—Ä—ã—Ç—å prompt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  hideInstallPrompt() {
    const installButton = document.getElementById('install-pwa-btn');
    if (installButton) {
      installButton.style.display = 'none';
    }
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
  async installPWA() {
    if (this.deferredPrompt) {
      this.deferredPrompt.prompt();
      const { outcome } = await this.deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        console.log('‚úÖ UMAY PWA: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É');
      } else {
        console.log('‚ùå UMAY PWA: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
      }
      
      this.deferredPrompt = null;
    }
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ iOS
  showiOSInstallHelp(isChromeIOS = false) {
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
    if (isChromeIOS) {
      this.showWarningMessage('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ iOS –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Safari. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ Safari.');
      return;
    }
    this.showWarningMessage('Safari ‚Üí –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –ù–∞ —ç–∫—Ä–∞–Ω ¬´–î–æ–º–æ–π¬ª. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ iOS –¥–ª—è –≤—Å–µ—Ö PWA.');
  }
  
  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestNotificationPermission() {
    try {
      const permission = await Notification.requestPermission();
      if (permission === 'granted') {
        console.log('‚úÖ UMAY PWA: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
        this.subscribeToPushNotifications();
      } else {
        console.log('‚ùå UMAY PWA: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå UMAY PWA: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
    }
  }
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async subscribeToPushNotifications() {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: this.urlBase64ToUint8Array('YOUR_VAPID_PUBLIC_KEY')
        });
        
        console.log('‚úÖ UMAY PWA: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendSubscriptionToServer(subscription);
        
      } catch (error) {
        console.error('‚ùå UMAY PWA: –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push:', error);
      }
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendSubscriptionToServer(subscription) {
    try {
      const response = await fetch('/api/push-subscription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(subscription)
      });
      
      if (response.ok) {
        console.log('‚úÖ UMAY PWA: –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
    } catch (error) {
      console.error('‚ùå UMAY PWA: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞
  urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');
    
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  checkInstallation() {
    if (window.matchMedia('(display-mode: standalone)').matches || 
        window.navigator.standalone === true) {
      this.isInstalled = true;
      console.log('‚úÖ UMAY PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ standalone —Ä–µ–∂–∏–º–µ');
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ online —Å—Ç–∞—Ç—É—Å–∞
  updateOnlineStatus() {
    const statusElement = document.getElementById('online-status');
    if (statusElement) {
      if (this.isOnline) {
        statusElement.textContent = 'üü¢ –û–Ω–ª–∞–π–Ω';
        statusElement.className = 'text-green-600';
      } else {
        statusElement.textContent = 'üî¥ –û—Ñ–ª–∞–π–Ω';
        statusElement.className = 'text-red-600';
      }
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  showUpdateNotification() {
    if (confirm('–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è UMAY. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?')) {
      window.location.reload();
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
  showSuccessMessage(message) {
    this.showToast(message, 'success');
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  showWarningMessage(message) {
    this.showToast(message, 'warning');
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å toast —Å–æ–æ–±—â–µ–Ω–∏–µ
  showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500 text-white' :
      type === 'warning' ? 'bg-yellow-500 text-white' :
      'bg-blue-500 text-white'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PWA
  getPWAInfo() {
    return {
      isInstalled: this.isInstalled,
      isOnline: this.isOnline,
      supportsPWA: 'serviceWorker' in navigator && 'PushManager' in window,
      notificationPermission: Notification.permission
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.umayPWA = new UMAYPWA();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = UMAYPWA;
}
